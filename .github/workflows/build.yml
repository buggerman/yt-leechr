name: Build Executables

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'dev'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux x64
            artifact: linux-x64
            arch: x64
          - os: ubuntu-latest
            name: Linux ARM64
            artifact: linux-aarch64
            arch: aarch64
          - os: windows-latest
            name: Windows x64
            artifact: windows-x64
            arch: x64
          - os: macos-latest
            name: macOS ARM64
            artifact: macos-arm64
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch == 'aarch64' && 'x64' || (matrix.arch == 'arm64' && 'x64') || matrix.arch }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [ "${{ matrix.arch }}" == "aarch64" ]; then
          # For ARM64 cross-compilation, install cross tools and emulation
          sudo apt-get install -y qemu-user-static binfmt-support
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # Install standard dependencies
          sudo apt-get install -y xvfb libegl1 libgl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          echo "ARM64 cross-compilation tools installed"
        else
          sudo apt-get install -y xvfb libegl1 libgl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Setup platform-specific ffmpeg
      run: |
        cd tools
        if [ "$RUNNER_OS" == "Linux" ]; then
          if [ "${{ matrix.arch }}" == "aarch64" ]; then
            # For ARM64 Linux, use x64 binary with emulation as fallback
            curl -L "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linuxarm64-gpl.tar.xz" -o ffmpeg-linux.tar.xz 2>/dev/null || \
            curl -L "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz" -o ffmpeg-linux.tar.xz
          else
            curl -L "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz" -o ffmpeg-linux.tar.xz
          fi
          tar -xf ffmpeg-linux.tar.xz
          find . -name ffmpeg -type f -executable -exec cp {} ./ffmpeg \;
          rm -rf ffmpeg-master-latest-* ffmpeg-linux.tar.xz
          chmod +x ffmpeg
          echo "Downloaded Linux ffmpeg: $(ls -la ffmpeg)"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          curl -L "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip" -o ffmpeg-windows.zip
          unzip -q ffmpeg-windows.zip
          find . -name ffmpeg.exe -exec cp {} ./ffmpeg.exe \;
          rm -rf ffmpeg-master-latest-* ffmpeg-windows.zip
          # Create mkvmerge wrapper that uses ffmpeg
          echo '@echo off' > mkvmerge.bat
          echo '"%~dp0ffmpeg.exe" -i "%1" -i "%2" -c copy "%3"' >> mkvmerge.bat
          echo "Downloaded Windows ffmpeg: $(ls -la ffmpeg.exe)"
          echo "Created Windows mkvmerge wrapper: $(ls -la mkvmerge.bat)"
        fi
      shell: bash

    - name: Build executable
      run: |
        python build.py
      env:
        QT_QPA_PLATFORM: offscreen
        BUILD_ARCH: ${{ matrix.arch }}

    - name: List build artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        ls -la dist/
        
    - name: List build artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        dir dist\

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YT-Leechr-${{ matrix.artifact }}
        path: |
          dist/*.exe
          dist/*.app
          dist/YT-Leechr-*
          dist/*.zip
          dist/*.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Display structure of downloaded files
      run: find dist/ -type f || true
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/YT-Leechr-windows-x64/YT-Leechr-windows-x64.exe
          dist/YT-Leechr-windows-x64/YT-Leechr-windows-x64-portable.zip
          dist/YT-Leechr-linux-x64/YT-Leechr-linux-x64
          dist/YT-Leechr-linux-x64/YT-Leechr-linux-x64-portable.tar.gz
          dist/YT-Leechr-linux-aarch64/YT-Leechr-linux-aarch64
          dist/YT-Leechr-linux-aarch64/YT-Leechr-linux-aarch64-portable.tar.gz
          dist/YT-Leechr-macos-arm64/YT Leechr.app
          dist/YT-Leechr-macos-arm64/YT-Leechr-darwin-arm64-portable.tar.gz
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}